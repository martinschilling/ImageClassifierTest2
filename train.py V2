import argparse
import matplotlib.pyplot as plt

import numpy as np

import torch
from torch import nn
from torch import optim
import torch.nn.functional as F
import torchvision
from torchvision import datasets, transforms, models

from PIL import Image

import json

from collections import OrderedDict

def parse_args():
    parser = argparse.ArgumentParser(description='Training: prints out training loss, validation loss, and validation accuracy as the network trains.')
    parser.add_argument('--data dir', action='store', help='trains network on this data set')
    parser.add_argument('--save dir', dest="save_dir", action="store", default="checkpoint.pth", help='saves the model to a directory')
    parser.add_argument('--arch', dest='arch', default='densenet121', choices=['vgg13', 'densenet121'], help='selects the architecture of network')
    parser.add_argument('--learning rate', dest='learning_rate', default='0.001', help='sets the learning rate')
    parser.add_argument('--hidden units', dest='hidden_units', default='512', help='sets the number of hidden units, default is 512')
    parser.add_argument('--epochs', dest='epochs', default='3', help='sets the number of epochs, default is 3')
    parser.add_argument('--gpu', action='store', default='gpu', help='uses GPU for training as default')
    return parser.parse_args()

args = parse_args()

def train(model, criterion, optimizer, dataloaders, gpu, epochs):
    criterion = nn.NLLLoss()
    optimizer = optim.Adam(model.classifier.parameters(), lr=float(args.learning_rate))

    
    steps = 0
    print_every = 15

    for epoch in range(epochs):
        running_loss = 0
        for inputs, labels in dataloaders[0]:
            steps += 1
            # Move input and label tensors to the default device
            if gpu == 'gpu':
                model.cuda()
                inputs, labels = inputs.to('cuda'), labels.to('cuda')
            else:
                model.cpu()
                inputs, labels = inputs.to('cpu'), labels.to('cpu')

            optimizer.zero_grad()

            logps = model.forward(inputs)
            loss = criterion(logps, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

            if steps % print_every == 0:
                validation_loss = 0
                accuracy = 0
                model.eval()
                with torch.no_grad():
                    for inputs, labels in dataloaders[1]:
                        inputs, labels = inputs.to('cuda'), labels.to('cuda')
                        logps = model.forward(inputs)
                        batch_loss = criterion(logps, labels)

                        validation_loss += batch_loss.item()

                        # Calculate accuracy
                        ps = torch.exp(logps)
                        top_p, top_class = ps.topk(1, dim=1)
                        equals = top_class == labels.view(*top_class.shape)
                        accuracy += torch.mean(equals.type(torch.FloatTensor)).item()

                print(f"Epoch {epoch+1}/{epochs}.. "
                      f"Train loss: {running_loss/print_every:.3f}.. "
                      f"Validation loss: {validation_loss/len(dataloaders[1]):.3f}.. "
                      f"Accuracy: {accuracy/len(dataloaders[1]):.3f}")
                running_loss = 0
                model.train()

def main():
    args = parse_args()               
    
    data_dir = 'flowers'
    train_dir = data_dir + '/train'
    valid_dir = data_dir + '/valid'
    test_dir = data_dir + '/test'

    # TODO: Define your transforms for the training, validation, and testing sets
    train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                           transforms.RandomResizedCrop(224),
                                           transforms.RandomHorizontalFlip(),
                                           transforms.ToTensor(),
                                           transforms.Normalize([0.485, 0.456, 0.406],
                                                                [0.229, 0.224, 0.225])])

    valid_transforms = transforms.Compose([transforms.RandomRotation(30),
                                           transforms.RandomResizedCrop(224),
                                           transforms.RandomHorizontalFlip(),
                                           transforms.ToTensor(),
                                           transforms.Normalize([0.485, 0.456, 0.406],
                                                                [0.229, 0.224, 0.225])])

    test_transforms = transforms.Compose([transforms.Resize(255),
                                          transforms.CenterCrop(224),
                                          transforms.ToTensor(),
                                          transforms.Normalize([0.485, 0.456, 0.406],
                                                               [0.229, 0.224, 0.225])])
    # TODO: Load the datasets with ImageFolder
    image_datasets = [datasets.ImageFolder(train_dir, transform=train_transforms),
                      datasets.ImageFolder(valid_dir, transform=valid_transforms),
                      datasets.ImageFolder(test_dir, transform=test_transforms)]

    # TODO: Using the image datasets and the trainforms, define the dataloaders
    dataloaders = [torch.utils.data.DataLoader(image_datasets[0], batch_size=64, shuffle=True),
                   torch.utils.data.DataLoader(image_datasets[1], batch_size=64, shuffle=True),
                   torch.utils.data.DataLoader(image_datasets[2], batch_size=64, shuffle=True)]


    model = getattr(models, args.arch)(pretrained=True)
            
    for param in model.parameters():
        param.requires_grad = False
    
    if args.arch == "vgg13":
        classifier = nn.Sequential(OrderedDict([
                                  ('fc1', nn.Linear(25088, 1024)),
                                  ('relu', nn.ReLU()),
                                  ('drop_out', nn.Dropout(0.5)),
                                  ('fc2', nn.Linear(1024, 512)),
                                  ('fc3', nn.Linear(512, 102)),
                                  ('output', nn.LogSoftmax(dim=1))
                                  ]))
    elif args.arch == "densenet121":
        classifier = nn.Sequential(OrderedDict([
                                  ('fc1', nn.Linear(25088, 1024)),
                                  ('relu', nn.ReLU()),
                                  ('drop_out', nn.Dropout(0.5)),
                                  ('fc2', nn.Linear(1024, 512)),
                                  ('fc3', nn.Linear(512, 102)),
                                  ('output', nn.LogSoftmax(dim=1))
                                  ]))

    model.classifier = classifier
    criterion = nn.NLLLoss()
    optimizer = optim.Adam(model.classifier.parameters(), lr=float(args.learning_rate))

    epochs = int(args.epochs)
    class_index = image_datasets[0].class_to_idx
    gpu = args.gpu
    
    train(model, criterion, optimizer, dataloaders, gpu, epochs)
    
#     save checkpoint
    model.class_to_idx = image_datasets[0].class_to_idx

    checkpoint_path = 'vgg16_checkpoint.pth'

    checkpoint = {'input_size': 25088,
              'output_size': 102,
              'arch': 'vgg16',
              'classifier': classifier,
              'epochs': epochs,
              'state_dict': model.state_dict(),
              'optimizer': optimizer.state_dict(),
              'class_to_idx': model.class_to_idx}

    torch.save(checkpoint, 'checkpoint.pth')
    
    path = args.save_dir 
    save_checkpoint(path, model, optimizer, args, classifier)


if __name__ == "__main__":
    main()
